//1.Binary Tree Inorder Traversal
    class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        inorder(root,result);
        return(result);
    }
    public void inorder(TreeNode root ,List<Integer> result ){
        if(root==null){
            return;
        }
        
        inorder(root.left,result);
        result.add(root.val);
        inorder(root.right,result);
    }
}


//2.Binary Tree Preorder Traversal
    class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        preorder(root,result);
        return(result);
    }
    public void preorder(TreeNode root ,List<Integer> result ){
        if(root==null){
            return;
        }
        result.add(root.val);
        preorder(root.left,result);
        preorder(root.right,result);
    }
}
//3.Binary Tree Postorder Traversal
    class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        postorder(root,result);
        return(result);
    }
    public void postorder(TreeNode root ,List<Integer> result ){
        if(root==null){
            return;
        }
        
        postorder(root.left,result);
        postorder(root.right,result);
        result.add(root.val);
    }
}


//4.Maximum Depth of Binary Tree

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return Math.max(left, right) + 1;
    }
}
